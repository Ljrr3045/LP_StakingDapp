{
  "address": "0xaca81583840B1bf2dDF6CDe824ada250C1936B4D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueForPermit",
          "type": "uint256"
        }
      ],
      "name": "addPoolLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "enum LpContract.NetWork",
          "name": "_netWork",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPoolLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52ff707cb995d22bf707b3b1668aa2f6e92312d3ea4e6f486631091cc3600307",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xaca81583840B1bf2dDF6CDe824ada250C1936B4D",
    "transactionIndex": 0,
    "gasUsed": "2347585",
    "logsBloom": "0x
    "blockHash": "0x710f51ab090b84c8483da8ea452fb348b38ac3a2685319ec4a72036f10bfba1b",
    "transactionHash": "0x52ff707cb995d22bf707b3b1668aa2f6e92312d3ea4e6f486631091cc3600307",
    "logs": [],
    "blockNumber": 14578719,
    "cumulativeGasUsed": "2347585",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9c9b7bbdcea1d335e0bc792c903a1376",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueForPermit\",\"type\":\"uint256\"}],\"name\":\"addPoolLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"enum LpContract.NetWork\",\"name\":\"_netWork\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPoolLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPoolLiquidity(uint8,bytes32,bytes32,uint256,uint256)\":{\"details\":\"This function add liquidity in the pool \",\"params\":{\"deadline\":\"Transaction limit time \",\"r\":\"Component of an ECDSA digital signature\",\"s\":\"Component of an ECDSA digital signature\",\"v\":\"Component of an ECDSA digital signature\",\"valueForPermit\":\"Value to permit \"}},\"initialize(address,address,uint8)\":{\"params\":{\"_netWork\":\"Blockchain Number \",\"_rewardsToken\":\"address of the rewards token\",\"_stakingToken\":\"address of the staking token\"}},\"withdrawPoolLiquidity()\":{\"details\":\"Withdraw the total balance of the user \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LPStakingMain.sol\":\"LPStakingMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ErcToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0<0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ErcToken is ERC20, Ownable {\\n    \\n    constructor(\\n        string memory name_, \\n        string memory symbol_) \\n        ERC20 (name_,symbol_)\\n    {}\\n\\n    function mint(address account, uint256 amount) public onlyOwner(){\\n        _mint(account, amount);\\n    }\\n}\",\"keccak256\":\"0x1300d9589b36162410249d7562a3c394c71df51d704c0f37c3352e25308b0ad9\",\"license\":\"MIT\"},\"contracts/Interfaces/IUniswapV2ERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0<0.9.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0x5babdaca5193efcf943cc12369eae8d30fbe9a2d3c088cf4a5c0cc692562b450\",\"license\":\"MIT\"},\"contracts/Interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\ninterface IUniswapV2Factory {\\n  function getPair(address token0, address token1) external view returns (address);\\n}\",\"keccak256\":\"0x971783d54517e84f625063c06477db759470f57261be86191da4df612a738fc4\",\"license\":\"MIT\"},\"contracts/Interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\ninterface IUniswapV2Pair {\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function swap(\\n    uint amount0Out,\\n    uint amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\",\"keccak256\":\"0xacbedbcd00ad0ffdcee9c82c027df9620df576e086578248153ef50e409b3e58\",\"license\":\"MIT\"},\"contracts/Interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\ninterface IUniswapV2Router {\\n  function getAmountsOut(uint amountIn, address[] memory path)\\n    external\\n    view\\n    returns (uint[] memory amounts);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (\\n      uint amountA,\\n      uint amountB,\\n      uint liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n}\",\"keccak256\":\"0xa6af9dd841214063c46f7deefc06081380d4cbcd30b07568ad64c9e0017015d4\",\"license\":\"MIT\"},\"contracts/LPStakingMain.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/**\\n@author ljrr3045\\n@author Jhonaiker2309\\n@author Barbara-Marcano\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//CONTRACTS\\nimport \\\"./ErcToken.sol\\\";\\nimport \\\"./LpContract.sol\\\";\\nimport \\\"./StakeContract.sol\\\";\\n//INTERFACES\\nimport \\\"./Interfaces/IUniswapV2ERC20.sol\\\";\\n\\ncontract LPStakingMain is LpContract, StakeContract {\\n    // VARIABLES\\n    bool init;\\n    IUniswapV2ERC20 ETHDAIpool; // UNISWAP ETHDAIpool\\n\\n    // FUNCTIONS\\n    /**\\n     @param _stakingToken address of the staking token\\n     @param _rewardsToken address of the rewards token\\n     @param _netWork  Blockchain Number \\n     */\\n    function initialize(\\n        address _stakingToken,\\n        address _rewardsToken,\\n        NetWork _netWork\\n    ) public {\\n        require(init == false, \\\"Contract are initialized\\\");\\n\\n        _LpContract_init(_netWork);\\n        _StakeContract_init(_stakingToken, _rewardsToken);\\n\\n        if (_netWork == NetWork.Maint) {\\n            ETHDAIpool = IUniswapV2ERC20(\\n                0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11\\n            );\\n        } else {\\n            ETHDAIpool = IUniswapV2ERC20(\\n                0x1c5DEe94a34D795f9EEeF830B68B80e44868d316\\n            );\\n        }\\n\\n        init = true;\\n    }\\n\\n    /**\\n    @param v Component of an ECDSA digital signature\\n    @param r Component of an ECDSA digital signature\\n    @param s Component of an ECDSA digital signature\\n    @param deadline Transaction limit time \\n    @param valueForPermit Value to permit \\n    @dev This function add liquidity in the pool \\n     */\\n    function addPoolLiquidity(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 deadline,\\n        uint256 valueForPermit\\n    ) external payable {\\n        require(msg.value > 0, \\\"Need enough money to add liquidity\\\");\\n        uint256 lpTokenAmount;\\n\\n        addLiquidity();\\n\\n        ETHDAIpool.permit(\\n            msg.sender,\\n            address(this),\\n            valueForPermit,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        lpTokenAmount = ETHDAIpool.balanceOf(msg.sender);\\n        _stake(lpTokenAmount);\\n    }\\n\\n    /**\\n    @dev Withdraw the total balance of the user \\n    */\\n    function withdrawPoolLiquidity() external {\\n        require(balances[msg.sender] > 0, \\\"Don't have money to withdraw\\\");\\n        uint256 _amount = balances[msg.sender];\\n        _withdraw(_amount);\\n        _getReward();\\n    }\\n}\\n\",\"keccak256\":\"0xe65c925a5f98acffedd4a71841282b800ffab2d987cd0669ca8f096e358edcb5\",\"license\":\"MIT\"},\"contracts/LpContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0<0.9.0;\\n\\n// CONTRACTS\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// INTERFACES\\nimport \\\"./Interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./Interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./Interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract LpContract{\\n    using SafeMath for uint;\\n\\n// VARIABLES \\n    address internal dai;\\n    address internal weth;\\n    IUniswapV2Router internal routerV2;\\n    IUniswapV2Factory internal factoryV2;\\n\\n    enum NetWork {Maint, Ropsten} // Blockchain number\\n\\n// FUNCTIONS\\n\\n/**\\n@param _netWork Blockchain number\\n@dev Initialize the contract \\n */\\n    function _LpContract_init(NetWork _netWork) internal {\\n\\n        if(_netWork == NetWork.Maint){\\n\\n            dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n            weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n        }else{\\n\\n            dai = 0xaD6D458402F60fD3Bd25163575031ACDce07538D;\\n            weth = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n        }\\n\\n        routerV2 = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        factoryV2 = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    }\\n\\n/**\\n@dev Add liquidity to UNISWAP pool\\n */\\n    function addLiquidity() internal{\\n\\n        _swapEthForDai(_swapAmount(msg.value));\\n        uint _amountTokenDesired = IERC20(dai).balanceOf(address(this));\\n        uint _amountEthAdd = address(this).balance - 10;\\n        IERC20(dai).approve(address(routerV2), _amountTokenDesired);\\n\\n        routerV2.addLiquidityETH{value: _amountEthAdd}(\\n            dai,\\n            _amountTokenDesired,\\n            0,\\n            0,\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint refoundDai = IERC20(dai).balanceOf(address(this));\\n\\n        if(address(this).balance > 0){\\n\\n            (bool success,) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n            require(success, \\\"refund failed\\\");\\n        }\\n\\n        if(refoundDai > 0){\\n            IERC20(dai).transfer(msg.sender, refoundDai);\\n        }\\n\\n    }\\n/**\\n@param y Number to obtain square root \\n */\\n    function _sqrt(uint y) private pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        }else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n/**\\n@dev Calculate the SWAP amount to obtain\\n */\\n    function _getSwapAmount(uint r, uint a) private pure returns (uint) {\\n        return (_sqrt(r.mul(r.mul(3988009) + a.mul(3988000))).sub(r.mul(1997))) / 1994;\\n    }\\n /**\\n @param _amount Amount to SWAP\\n  */\\n    function _swapAmount(uint _amount) private view returns(uint){\\n        uint _swap;\\n\\n        address pair = factoryV2.getPair(weth, dai);\\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(pair).getReserves();\\n\\n        if (IUniswapV2Pair(pair).token0() == weth) {\\n            _swap = _getSwapAmount(reserve0, _amount);\\n        } else {\\n            _swap = _getSwapAmount(reserve1, _amount);\\n        }\\n\\n        return _swap;\\n    }\\n/**\\n@dev SWAP ETHER to DAI \\n@param _amount Amount to SWAP\\n */\\n    function _swapEthForDai(uint _amount) private {\\n\\n        address[] memory path = new address[](2);\\n        path = new address[](2);\\n        path[0] = weth;\\n        path[1] = dai;\\n\\n        routerV2.swapExactETHForTokens {value : _amount}(\\n            1,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n}\",\"keccak256\":\"0x7fae48b27ca44cf5d7ab37ed4dc7354f561cabd51cee6b40e5590552054f1c9a\",\"license\":\"MIT\"},\"contracts/StakeContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/**\\n@author ljrr3045\\n@author Jhonaiker2309\\n@author Barbara-Marcano\\n */\\npragma solidity >=0.8.0<0.9.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StakeContract {\\n    // VARIABLES\\n    IERC20 public rewardsToken;\\n    IERC20 public stakingToken;\\n\\n    uint public rewardRate;\\n    uint public lastUpdateTime;\\n    uint public rewardPerTokenStored;\\n\\n    mapping(address => uint) public userRewardPerTokenPaid;\\n    mapping(address => uint) public rewards;\\n\\n    uint private _totalSupply;\\n    mapping(address => uint) public balances;\\n\\n    // MODIFIER\\n    /**\\n    @dev Update the reward of a user\\n     */\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = _rewardPerToken();\\n        lastUpdateTime = block.timestamp;\\n\\n        rewards[account] = _earned(account);\\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        _;\\n    }\\n    // FUNCTIONS\\n    /**\\n    @dev Initialize the contract \\n    @param _stakingToken address of the staking token\\n    @param _rewardsToken address of the rewards token\\n     */\\n    function _StakeContract_init(address _stakingToken, address _rewardsToken) internal {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IERC20(_rewardsToken);\\n        rewardRate = 100;\\n    }\\n    /**\\n    @param _amount Amount to stake\\n     */\\n    function _stake(uint _amount) internal updateReward(msg.sender){\\n        _totalSupply += _amount;\\n        balances[msg.sender] += _amount;\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n    /**\\n    @param _amount Amount to withdraw\\n     */\\n    function _withdraw(uint _amount) internal updateReward(msg.sender){\\n        require(balances[msg.sender] >=_amount);\\n        _totalSupply -= _amount;\\n        balances[msg.sender] -= _amount;\\n        stakingToken.transfer(msg.sender, _amount);\\n    }\\n    /**\\n    @dev Get stake rewards\\n     */\\n    function _getReward() internal updateReward(msg.sender){\\n        uint reward = rewards[msg.sender];\\n        rewards[msg.sender] = 0;\\n        require(reward != 0);\\n        rewardsToken.transfer(msg.sender, reward);\\n    }\\n    /**\\n    @dev Amount of rewards per tokens\\n     */\\n    function _rewardPerToken() internal view returns (uint) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\\n    }\\n    /**\\n    @param account User address \\n    @dev Calculate the rewards earned by account \\n    */\\n    function _earned(address account) internal view returns (uint) {\\n        return\\n            ((balances[account] *\\n                (_rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\\n            rewards[account];\\n    }\\n}\\n\",\"keccak256\":\"0xc35e8847b0d95bfc4942533c6be3fabb7b1c440ff94bacab4eeb9bff7cc748f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c806389232a001161006457806389232a00146101885780638b876347146101b1578063c8f33c91146101ee578063d1af0c7d14610219578063df136d6514610244578063df2a73ee1461026f5761009c565b806306509986146100a15780630700037d146100b857806327e235e3146100f557806372f702f3146101325780637b0a47ee1461015d575b600080fd5b3480156100ad57600080fd5b506100b661028b565b005b3480156100c457600080fd5b506100df60048036038101906100da9190611c27565b610365565b6040516100ec9190611c6d565b60405180910390f35b34801561010157600080fd5b5061011c60048036038101906101179190611c27565b61037d565b6040516101299190611c6d565b60405180910390f35b34801561013e57600080fd5b50610147610395565b6040516101549190611ce7565b60405180910390f35b34801561016957600080fd5b506101726103bb565b60405161017f9190611c6d565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa9190611d27565b6103c1565b005b3480156101bd57600080fd5b506101d860048036038101906101d39190611c27565b610527565b6040516101e59190611c6d565b60405180910390f35b3480156101fa57600080fd5b5061020361053f565b6040516102109190611c6d565b60405180910390f35b34801561022557600080fd5b5061022e610545565b60405161023b9190611ce7565b60405180910390f35b34801561025057600080fd5b5061025961056b565b6040516102669190611c6d565b60405180910390f35b61028960048036038101906102849190611e15565b610571565b005b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161030d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030490611eed565b60405180910390fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061035a81610715565b61036261092c565b50565b600a6020528060005260406000206000915090505481565b600c6020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60001515600d60009054906101000a900460ff16151514610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040e90611f59565b60405180910390fd5b61042081610b1f565b61042a8383610d51565b6000600181111561043e5761043d611f79565b5b81600181111561045157610450611f79565b5b14156104b15773a478c2975ab1ea89e8196811f51a7b7ade33eb11600d60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610507565b731c5dee94a34d795f9eeef830b68b80e44868d316600d60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600d60006101000a81548160ff021916908315150217905550505050565b60096020528060005260406000206000915090505481565b60075481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b600034116105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab9061201a565b60405180910390fd5b60006105be610ddf565b600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333085878b8b8b6040518863ffffffff1660e01b81526004016106259796959493929190612067565b600060405180830381600087803b15801561063f57600080fd5b505af1158015610653573d6000803e3d6000fd5b50505050600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106b291906120d6565b60206040518083038186803b1580156106ca57600080fd5b505afa1580156106de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107029190612106565b905061070d8161127d565b505050505050565b3361071e61144a565b60088190555042600781905550610734816114ae565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561080957600080fd5b81600b600082825461081b9190612162565b9250508190555081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108719190612162565b92505081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016108d5929190612196565b602060405180830381600087803b1580156108ef57600080fd5b505af1158015610903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092791906121f7565b505050565b3361093561144a565b6008819055504260078190555061094b816114ae565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000811415610a6b57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ac8929190612196565b602060405180830381600087803b158015610ae257600080fd5b505af1158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a91906121f7565b505050565b60006001811115610b3357610b32611f79565b5b816001811115610b4657610b45611f79565b5b1415610bfa57736b175474e89094c44da98b954eedeac495271d0f6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ca4565b73ad6d458402f60fd3bd25163575031acdce07538d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073c778417e063141139fce010982780140aa0cd5ab600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b737a250d5630b4cf539739df2c5dacb4c659f2488d600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060646006819055505050565b610df0610deb346115b0565b611849565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e4c91906120d6565b60206040518083038186803b158015610e6457600080fd5b505afa158015610e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9c9190612106565b90506000600a47610ead9190612162565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610f2c929190612196565b602060405180830381600087803b158015610f4657600080fd5b505af1158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e91906121f7565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d7198260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560008033426040518863ffffffff1660e01b81526004016110069695949392919061225f565b6060604051808303818588803b15801561101f57600080fd5b505af1158015611033573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061105891906122c0565b50505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110b791906120d6565b60206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190612106565b905060004711156111c05760003373ffffffffffffffffffffffffffffffffffffffff164760405161113890612344565b60006040518083038185875af1925050503d8060008114611175576040519150601f19603f3d011682016040523d82523d6000602084013e61117a565b606091505b50509050806111be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b5906123a5565b60405180910390fd5b505b60008111156112785760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611224929190612196565b602060405180830381600087803b15801561123e57600080fd5b505af1158015611252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127691906121f7565b505b505050565b3361128661144a565b6008819055504260078190555061129c816114ae565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600b600082825461133791906123c5565b9250508190555081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461138d91906123c5565b92505081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016113f39392919061241b565b602060405180830381600087803b15801561140d57600080fd5b505af1158015611421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144591906121f7565b505050565b600080600b5414156114605760085490506114ab565b600b54670de0b6b3a76400006006546007544261147d9190612162565b6114879190612452565b6114919190612452565b61149b91906124db565b6008546114a891906123c5565b90505b90565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461154161144a565b61154b9190612162565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115959190612452565b61159f91906124db565b6115a991906123c5565b9050919050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a43905600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161165492919061250c565b60206040518083038186803b15801561166c57600080fd5b505afa158015611680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a4919061254a565b90506000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156116ef57600080fd5b505afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172791906125f9565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156117cb57600080fd5b505afa1580156117df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611803919061254a565b73ffffffffffffffffffffffffffffffffffffffff161415611830576118298287611a82565b935061183d565b61183a8187611a82565b93505b83945050505050919050565b6000600267ffffffffffffffff8111156118665761186561264c565b5b6040519080825280602002602001820160405280156118945781602001602082028036833780820191505090505b509050600267ffffffffffffffff8111156118b2576118b161264c565b5b6040519080825280602002602001820160405280156118e05781602001602082028036833780820191505090505b509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061191a5761191961267b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106119895761198861267b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab58360018430426040518663ffffffff1660e01b8152600401611a2694939291906127a3565b6000604051808303818588803b158015611a3f57600080fd5b505af1158015611a53573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f82011682018060405250810190611a7d9190612919565b505050565b60006107ca611afd611a9f6107cd86611b0f90919063ffffffff16565b611aef611aea611abb623cda2088611b0f90919063ffffffff16565b611ad1623cda298a611b0f90919063ffffffff16565b611adb91906123c5565b88611b0f90919063ffffffff16565b611b25565b611b9f90919063ffffffff16565b611b0791906124db565b905092915050565b60008183611b1d9190612452565b905092915050565b60006003821115611b8c5781905060006001600284611b4491906124db565b611b4e91906123c5565b90505b81811015611b86578091506002818285611b6b91906124db565b611b7591906123c5565b611b7f91906124db565b9050611b51565b50611b9a565b60008214611b9957600190505b5b919050565b60008183611bad9190612162565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611bf482611bc9565b9050919050565b611c0481611be9565b8114611c0f57600080fd5b50565b600081359050611c2181611bfb565b92915050565b600060208284031215611c3d57611c3c611bbf565b5b6000611c4b84828501611c12565b91505092915050565b6000819050919050565b611c6781611c54565b82525050565b6000602082019050611c826000830184611c5e565b92915050565b6000819050919050565b6000611cad611ca8611ca384611bc9565b611c88565b611bc9565b9050919050565b6000611cbf82611c92565b9050919050565b6000611cd182611cb4565b9050919050565b611ce181611cc6565b82525050565b6000602082019050611cfc6000830184611cd8565b92915050565b60028110611d0f57600080fd5b50565b600081359050611d2181611d02565b92915050565b600080600060608486031215611d4057611d3f611bbf565b5b6000611d4e86828701611c12565b9350506020611d5f86828701611c12565b9250506040611d7086828701611d12565b9150509250925092565b600060ff82169050919050565b611d9081611d7a565b8114611d9b57600080fd5b50565b600081359050611dad81611d87565b92915050565b6000819050919050565b611dc681611db3565b8114611dd157600080fd5b50565b600081359050611de381611dbd565b92915050565b611df281611c54565b8114611dfd57600080fd5b50565b600081359050611e0f81611de9565b92915050565b600080600080600060a08688031215611e3157611e30611bbf565b5b6000611e3f88828901611d9e565b9550506020611e5088828901611dd4565b9450506040611e6188828901611dd4565b9350506060611e7288828901611e00565b9250506080611e8388828901611e00565b9150509295509295909350565b600082825260208201905092915050565b7f446f6e27742068617665206d6f6e657920746f20776974686472617700000000600082015250565b6000611ed7601c83611e90565b9150611ee282611ea1565b602082019050919050565b60006020820190508181036000830152611f0681611eca565b9050919050565b7f436f6e74726163742061726520696e697469616c697a65640000000000000000600082015250565b6000611f43601883611e90565b9150611f4e82611f0d565b602082019050919050565b60006020820190508181036000830152611f7281611f36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e65656420656e6f756768206d6f6e657920746f20616464206c69717569646960008201527f7479000000000000000000000000000000000000000000000000000000000000602082015250565b6000612004602283611e90565b915061200f82611fa8565b604082019050919050565b6000602082019050818103600083015261203381611ff7565b9050919050565b61204381611be9565b82525050565b61205281611d7a565b82525050565b61206181611db3565b82525050565b600060e08201905061207c600083018a61203a565b612089602083018961203a565b6120966040830188611c5e565b6120a36060830187611c5e565b6120b06080830186612049565b6120bd60a0830185612058565b6120ca60c0830184612058565b98975050505050505050565b60006020820190506120eb600083018461203a565b92915050565b60008151905061210081611de9565b92915050565b60006020828403121561211c5761211b611bbf565b5b600061212a848285016120f1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061216d82611c54565b915061217883611c54565b92508282101561218b5761218a612133565b5b828203905092915050565b60006040820190506121ab600083018561203a565b6121b86020830184611c5e565b9392505050565b60008115159050919050565b6121d4816121bf565b81146121df57600080fd5b50565b6000815190506121f1816121cb565b92915050565b60006020828403121561220d5761220c611bbf565b5b600061221b848285016121e2565b91505092915050565b6000819050919050565b600061224961224461223f84612224565b611c88565b611c54565b9050919050565b6122598161222e565b82525050565b600060c082019050612274600083018961203a565b6122816020830188611c5e565b61228e6040830187612250565b61229b6060830186612250565b6122a8608083018561203a565b6122b560a0830184611c5e565b979650505050505050565b6000806000606084860312156122d9576122d8611bbf565b5b60006122e7868287016120f1565b93505060206122f8868287016120f1565b9250506040612309868287016120f1565b9150509250925092565b600081905092915050565b50565b600061232e600083612313565b91506123398261231e565b600082019050919050565b600061234f82612321565b9150819050919050565b7f726566756e64206661696c656400000000000000000000000000000000000000600082015250565b600061238f600d83611e90565b915061239a82612359565b602082019050919050565b600060208201905081810360008301526123be81612382565b9050919050565b60006123d082611c54565b91506123db83611c54565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156124105761240f612133565b5b828201905092915050565b6000606082019050612430600083018661203a565b61243d602083018561203a565b61244a6040830184611c5e565b949350505050565b600061245d82611c54565b915061246883611c54565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124a1576124a0612133565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006124e682611c54565b91506124f183611c54565b925082612501576125006124ac565b5b828204905092915050565b6000604082019050612521600083018561203a565b61252e602083018461203a565b9392505050565b60008151905061254481611bfb565b92915050565b6000602082840312156125605761255f611bbf565b5b600061256e84828501612535565b91505092915050565b60006dffffffffffffffffffffffffffff82169050919050565b61259a81612577565b81146125a557600080fd5b50565b6000815190506125b781612591565b92915050565b600063ffffffff82169050919050565b6125d6816125bd565b81146125e157600080fd5b50565b6000815190506125f3816125cd565b92915050565b60008060006060848603121561261257612611611bbf565b5b6000612620868287016125a8565b9350506020612631868287016125a8565b9250506040612642868287016125e4565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b60006126cf6126ca6126c5846126aa565b611c88565b611c54565b9050919050565b6126df816126b4565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61271a81611be9565b82525050565b600061272c8383612711565b60208301905092915050565b6000602082019050919050565b6000612750826126e5565b61275a81856126f0565b935061276583612701565b8060005b8381101561279657815161277d8882612720565b975061278883612738565b925050600181019050612769565b5085935050505092915050565b60006080820190506127b860008301876126d6565b81810360208301526127ca8186612745565b90506127d9604083018561203a565b6127e66060830184611c5e565b95945050505050565b600080fd5b6000601f19601f8301169050919050565b61280e826127f4565b810181811067ffffffffffffffff8211171561282d5761282c61264c565b5b80604052505050565b6000612840611bb5565b905061284c8282612805565b919050565b600067ffffffffffffffff82111561286c5761286b61264c565b5b602082029050602081019050919050565b600080fd5b600061289561289084612851565b612836565b905080838252602082019050602084028301858111156128b8576128b761287d565b5b835b818110156128e157806128cd88826120f1565b8452602084019350506020810190506128ba565b5050509392505050565b600082601f830112612900576128ff6127ef565b5b8151612910848260208601612882565b91505092915050565b60006020828403121561292f5761292e611bbf565b5b600082015167ffffffffffffffff81111561294d5761294c611bc4565b5b612959848285016128eb565b9150509291505056fea26469706673582212208da6b755690ae6a303136d1d6adc4461e5f5aef5249721445ea78194e003029964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPoolLiquidity(uint8,bytes32,bytes32,uint256,uint256)": {
        "details": "This function add liquidity in the pool ",
        "params": {
          "deadline": "Transaction limit time ",
          "r": "Component of an ECDSA digital signature",
          "s": "Component of an ECDSA digital signature",
          "v": "Component of an ECDSA digital signature",
          "valueForPermit": "Value to permit "
        }
      },
      "initialize(address,address,uint8)": {
        "params": {
          "_netWork": "Blockchain Number ",
          "_rewardsToken": "address of the rewards token",
          "_stakingToken": "address of the staking token"
        }
      },
      "withdrawPoolLiquidity()": {
        "details": "Withdraw the total balance of the user "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2269,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "dai",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2271,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "weth",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2274,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "routerV2",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Router)2104"
      },
      {
        "astId": 2277,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "factoryV2",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IUniswapV2Factory)1922"
      },
      {
        "astId": 2643,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)770"
      },
      {
        "astId": 2646,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "stakingToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)770"
      },
      {
        "astId": 2648,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "rewardRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2650,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2652,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2656,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2660,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "rewards",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2662,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2666,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "balances",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2116,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "init",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2119,
        "contract": "contracts/LPStakingMain.sol:LPStakingMain",
        "label": "ETHDAIpool",
        "offset": 1,
        "slot": "13",
        "type": "t_contract(IUniswapV2ERC20)1910"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)770": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2ERC20)1910": {
        "encoding": "inplace",
        "label": "contract IUniswapV2ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)1922": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router)2104": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}