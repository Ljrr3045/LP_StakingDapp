{
  "language": "Solidity",
  "sources": {
    "contracts/ContractsForTest/LpContractTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0<0.9.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../Interfaces/IUniswapV2Router.sol\";\nimport \"../Interfaces/IUniswapV2Pair.sol\";\nimport \"../Interfaces/IUniswapV2Factory.sol\";\n\ncontract LpContractTest{\n    using SafeMath for uint;\n\n    address internal dai;\n    address internal weth;\n    IUniswapV2Router internal routerV2;\n    IUniswapV2Factory internal factoryV2;\n    mapping(address => bool) isApproved;\n\n    function _LpContract_init() public {\n\n        dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n        weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n        routerV2 = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        factoryV2 = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n    }\n\n    function addLiquidity() public payable{\n\n        _swapEthForDai(_swapAmount(msg.value));\n        uint _amountTokenDesired = IERC20(dai).balanceOf(address(this));\n        uint _amountEthAdd = address(this).balance - 10;\n        IERC20(dai).approve(address(routerV2), _amountTokenDesired);\n\n        routerV2.addLiquidityETH{value: _amountEthAdd}(\n            dai,\n            _amountTokenDesired,\n            0,\n            0,\n            msg.sender,\n            block.timestamp\n        );\n\n        uint refoundDai = IERC20(dai).balanceOf(address(this));\n\n        if(address(this).balance > 0){\n\n            (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\n            require(success, \"refund failed\");\n        }\n\n        if(refoundDai > 0){\n            IERC20(dai).transfer(msg.sender, refoundDai);\n        }\n\n    }\n\n    function _sqrt(uint y) private pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        }else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    function _getSwapAmount(uint r, uint a) private pure returns (uint) {\n        return (_sqrt(r.mul(r.mul(3988009) + a.mul(3988000))).sub(r.mul(1997))) / 1994;\n    }\n\n    function _swapAmount(uint _amount) private view returns(uint){\n        uint _swap;\n\n        address pair = factoryV2.getPair(weth, dai);\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(pair).getReserves();\n\n        if (IUniswapV2Pair(pair).token0() == weth) {\n            _swap = _getSwapAmount(reserve0, _amount);\n        } else {\n            _swap = _getSwapAmount(reserve1, _amount);\n        }\n\n        return _swap;\n    }\n\n    function _swapEthForDai(uint _amount) private {\n\n        address[] memory path = new address[](2);\n        path = new address[](2);\n        path[0] = weth;\n        path[1] = dai;\n\n        routerV2.swapExactETHForTokens {value : _amount}(\n            1,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/Interfaces/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\ninterface IUniswapV2Router {\n  function getAmountsOut(uint amountIn, address[] memory path)\n    external\n    view\n    returns (uint[] memory amounts);\n\n  function swapExactTokensForTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external returns (uint[] memory amounts);\n\n  function swapExactTokensForETH(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external returns (uint[] memory amounts);\n\n  function swapExactETHForTokens(\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n  ) external payable returns (uint[] memory amounts);\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint amountADesired,\n    uint amountBDesired,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n  )\n    external\n    returns (\n      uint amountA,\n      uint amountB,\n      uint liquidity\n    );\n\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n  ) external returns (uint amountA, uint amountB);\n\n  function addLiquidityETH(\n    address token,\n    uint amountTokenDesired,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n  function removeLiquidityETH(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n  ) external returns (uint amountToken, uint amountETH);\n}"
    },
    "contracts/Interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\ninterface IUniswapV2Pair {\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    );\n\n  function swap(\n    uint amount0Out,\n    uint amount1Out,\n    address to,\n    bytes calldata data\n  ) external;\n}"
    },
    "contracts/Interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\ninterface IUniswapV2Factory {\n  function getPair(address token0, address token1) external view returns (address);\n}"
    },
    "contracts/LpContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0<0.9.0;\n\n// CONTRACTS\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// INTERFACES\nimport \"./Interfaces/IUniswapV2Router.sol\";\nimport \"./Interfaces/IUniswapV2Pair.sol\";\nimport \"./Interfaces/IUniswapV2Factory.sol\";\n\ncontract LpContract{\n    using SafeMath for uint;\n\n// VARIABLES \n    address internal dai;\n    address internal weth;\n    IUniswapV2Router internal routerV2;\n    IUniswapV2Factory internal factoryV2;\n\n    enum NetWork {Maint, Ropsten} // Blockchain number\n\n// FUNCTIONS\n\n/**\n@param _netWork Blockchain number\n@dev Initialize the contract \n */\n    function _LpContract_init(NetWork _netWork) internal {\n\n        if(_netWork == NetWork.Maint){\n\n            dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n            weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        }else{\n\n            dai = 0xaD6D458402F60fD3Bd25163575031ACDce07538D;\n            weth = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        }\n\n        routerV2 = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        factoryV2 = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n    }\n\n/**\n@dev Add liquidity to UNISWAP pool\n */\n    function addLiquidity() internal{\n\n        _swapEthForDai(_swapAmount(msg.value));\n        uint _amountTokenDesired = IERC20(dai).balanceOf(address(this));\n        uint _amountEthAdd = address(this).balance - 10;\n        IERC20(dai).approve(address(routerV2), _amountTokenDesired);\n\n        routerV2.addLiquidityETH{value: _amountEthAdd}(\n            dai,\n            _amountTokenDesired,\n            0,\n            0,\n            msg.sender,\n            block.timestamp\n        );\n\n        uint refoundDai = IERC20(dai).balanceOf(address(this));\n\n        if(address(this).balance > 0){\n\n            (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\n            require(success, \"refund failed\");\n        }\n\n        if(refoundDai > 0){\n            IERC20(dai).transfer(msg.sender, refoundDai);\n        }\n\n    }\n/**\n@param y Number to obtain square root \n */\n    function _sqrt(uint y) private pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        }else if (y != 0) {\n            z = 1;\n        }\n    }\n/**\n@dev Calculate the SWAP amount to obtain\n */\n    function _getSwapAmount(uint r, uint a) private pure returns (uint) {\n        return (_sqrt(r.mul(r.mul(3988009) + a.mul(3988000))).sub(r.mul(1997))) / 1994;\n    }\n /**\n @param _amount Amount to SWAP\n  */\n    function _swapAmount(uint _amount) private view returns(uint){\n        uint _swap;\n\n        address pair = factoryV2.getPair(weth, dai);\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(pair).getReserves();\n\n        if (IUniswapV2Pair(pair).token0() == weth) {\n            _swap = _getSwapAmount(reserve0, _amount);\n        } else {\n            _swap = _getSwapAmount(reserve1, _amount);\n        }\n\n        return _swap;\n    }\n/**\n@dev SWAP ETHER to DAI \n@param _amount Amount to SWAP\n */\n    function _swapEthForDai(uint _amount) private {\n\n        address[] memory path = new address[](2);\n        path = new address[](2);\n        path[0] = weth;\n        path[1] = dai;\n\n        routerV2.swapExactETHForTokens {value : _amount}(\n            1,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n}"
    },
    "contracts/LPStakingMain.sol": {
      "content": "//SPDX-License-Identifier: MIT\n/**\n@author ljrr3045\n@author Jhonaiker2309\n@author Barbara-Marcano\n */\npragma solidity >=0.8.0 <0.9.0;\n\n//CONTRACTS\nimport \"./ErcToken.sol\";\nimport \"./LpContract.sol\";\nimport \"./StakeContract.sol\";\n//INTERFACES\nimport \"./Interfaces/IUniswapV2ERC20.sol\";\n\ncontract LPStakingMain is LpContract, StakeContract {\n    // VARIABLES\n    bool init;\n    IUniswapV2ERC20 ETHDAIpool; // UNISWAP ETHDAIpool\n\n    // FUNCTIONS\n    /**\n     @param _stakingToken address of the staking token\n     @param _rewardsToken address of the rewards token\n     @param _netWork  Blockchain Number \n     */\n    function initialize(\n        address _stakingToken,\n        address _rewardsToken,\n        NetWork _netWork\n    ) public {\n        require(init == false, \"Contract are initialized\");\n\n        _LpContract_init(_netWork);\n        _StakeContract_init(_stakingToken, _rewardsToken);\n\n        if (_netWork == NetWork.Maint) {\n            ETHDAIpool = IUniswapV2ERC20(\n                0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11\n            );\n        } else {\n            ETHDAIpool = IUniswapV2ERC20(\n                0x1c5DEe94a34D795f9EEeF830B68B80e44868d316\n            );\n        }\n\n        init = true;\n    }\n\n    /**\n    @param v Component of an ECDSA digital signature\n    @param r Component of an ECDSA digital signature\n    @param s Component of an ECDSA digital signature\n    @param deadline Transaction limit time \n    @param valueForPermit Value to permit \n    @dev This function add liquidity in the pool \n     */\n    function addPoolLiquidity(\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        uint256 deadline,\n        uint256 valueForPermit\n    ) external payable {\n        require(msg.value > 0, \"Need enough money to add liquidity\");\n        uint256 lpTokenAmount;\n\n        addLiquidity();\n\n        ETHDAIpool.permit(\n            msg.sender,\n            address(this),\n            valueForPermit,\n            deadline,\n            v,\n            r,\n            s\n        );\n\n        lpTokenAmount = ETHDAIpool.balanceOf(msg.sender);\n        _stake(lpTokenAmount);\n    }\n\n    /**\n    @dev Withdraw the total balance of the user \n    */\n    function withdrawPoolLiquidity() external {\n        require(balances[msg.sender] > 0, \"Don't have money to withdraw\");\n        uint256 _amount = balances[msg.sender];\n        _withdraw(_amount);\n        _getReward();\n    }\n}\n"
    },
    "contracts/ErcToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0<0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ErcToken is ERC20, Ownable {\n    \n    constructor(\n        string memory name_, \n        string memory symbol_) \n        ERC20 (name_,symbol_)\n    {}\n\n    function mint(address account, uint256 amount) public onlyOwner(){\n        _mint(account, amount);\n    }\n}"
    },
    "contracts/StakeContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\n/**\n@author ljrr3045\n@author Jhonaiker2309\n@author Barbara-Marcano\n */\npragma solidity >=0.8.0<0.9.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract StakeContract {\n    // VARIABLES\n    IERC20 public rewardsToken;\n    IERC20 public stakingToken;\n\n    uint public rewardRate;\n    uint public lastUpdateTime;\n    uint public rewardPerTokenStored;\n\n    mapping(address => uint) public userRewardPerTokenPaid;\n    mapping(address => uint) public rewards;\n\n    uint private _totalSupply;\n    mapping(address => uint) public balances;\n\n    // MODIFIER\n    /**\n    @dev Update the reward of a user\n     */\n    modifier updateReward(address account) {\n        rewardPerTokenStored = _rewardPerToken();\n        lastUpdateTime = block.timestamp;\n\n        rewards[account] = _earned(account);\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        _;\n    }\n    // FUNCTIONS\n    /**\n    @dev Initialize the contract \n    @param _stakingToken address of the staking token\n    @param _rewardsToken address of the rewards token\n     */\n    function _StakeContract_init(address _stakingToken, address _rewardsToken) internal {\n        stakingToken = IERC20(_stakingToken);\n        rewardsToken = IERC20(_rewardsToken);\n        rewardRate = 100;\n    }\n    /**\n    @param _amount Amount to stake\n     */\n    function _stake(uint _amount) internal updateReward(msg.sender){\n        _totalSupply += _amount;\n        balances[msg.sender] += _amount;\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n    }\n    /**\n    @param _amount Amount to withdraw\n     */\n    function _withdraw(uint _amount) internal updateReward(msg.sender){\n        require(balances[msg.sender] >=_amount);\n        _totalSupply -= _amount;\n        balances[msg.sender] -= _amount;\n        stakingToken.transfer(msg.sender, _amount);\n    }\n    /**\n    @dev Get stake rewards\n     */\n    function _getReward() internal updateReward(msg.sender){\n        uint reward = rewards[msg.sender];\n        rewards[msg.sender] = 0;\n        require(reward != 0);\n        rewardsToken.transfer(msg.sender, reward);\n    }\n    /**\n    @dev Amount of rewards per tokens\n     */\n    function _rewardPerToken() internal view returns (uint) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored +\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\n    }\n    /**\n    @param account User address \n    @dev Calculate the rewards earned by account \n    */\n    function _earned(address account) internal view returns (uint) {\n        return\n            ((balances[account] *\n                (_rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\n            rewards[account];\n    }\n}\n"
    },
    "contracts/Interfaces/IUniswapV2ERC20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0<0.9.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ContractsForTest/StakeContractTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0<0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract StakeContractTest {\n    \n    IERC20 public rewardsToken;\n    IERC20 public stakingToken;\n\n    uint public rewardRate;\n    uint public lastUpdateTime;\n    uint public rewardPerTokenStored;\n\n    mapping(address => uint) public userRewardPerTokenPaid;\n    mapping(address => uint) public rewards;\n\n    uint private _totalSupply;\n    mapping(address => uint) public _balances;\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = _rewardPerToken();\n        lastUpdateTime = block.timestamp;\n\n        rewards[account] = _earned(account);\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        _;\n    }\n\n    function _StakeContract_init(address _stakingToken, address _rewardsToken) public {\n        stakingToken = IERC20(_stakingToken);\n        rewardsToken = IERC20(_rewardsToken);\n        rewardRate = 100;\n    }\n\n    function stake(uint _amount) public updateReward(msg.sender){\n        _totalSupply += _amount;\n        _balances[msg.sender] += _amount;\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function withdraw(uint _amount) public updateReward(msg.sender){\n        require(_balances[msg.sender] >=_amount);\n        _totalSupply -= _amount;\n        _balances[msg.sender] -= _amount;\n        stakingToken.transfer(msg.sender, _amount);\n    }\n\n    function getReward() public updateReward(msg.sender){\n        uint reward = rewards[msg.sender];\n        rewards[msg.sender] = 0;\n        require(reward != 0);\n        rewardsToken.transfer(msg.sender, reward);\n    }\n\n    function _rewardPerToken() internal view returns (uint) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored +\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\n    }\n\n    function _earned(address account) internal view returns (uint) {\n        return\n            ((_balances[account] *\n                (_rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\n            rewards[account];\n    }\n}\n"
    },
    "contracts/Interfaces/ILpContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0<0.9.0;\n\ninterface ILpContract {\n    function addLiquidity() external payable;\n}"
    },
    "contracts/Interfaces/IStakeContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0<0.9.0;\n\ninterface IStakeContract {\n    function getReward() external;\n    function stake(uint256 amount) external;\n    function withdraw(uint256 amount) external;  \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}